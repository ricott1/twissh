from __future__ import annotations

import random
from enum import Enum

c256 = [
    (205, 205, 0),
    (205, 0, 0),
    (205, 0, 205),
    (0, 0, 238),
    (0, 205, 205),
    (0, 205, 0),
    (255, 255, 0),
    (255, 0, 0),
    (255, 0, 255),
    (92, 92, 255),
    (0, 255, 255),
    (0, 255, 0),
    (0, 0, 255),
    (0, 95, 255),
    (0, 135, 255),
    (0, 175, 255),
    (0, 215, 255),
    (0, 255, 255),
    (0, 0, 0),
    (127, 127, 127),
    (95, 0, 255),
    (0, 0, 215),
    (0, 95, 215),
    (0, 135, 215),
    (0, 175, 215),
    (0, 215, 215),
    (0, 255, 215),
    (229, 229, 229),
    (255, 255, 255),
    (135, 0, 255),
    (95, 0, 215),
    (0, 0, 175),
    (0, 95, 175),
    (0, 135, 175),
    (0, 175, 175),
    (0, 215, 175),
    (0, 255, 175),
    (175, 0, 255),
    (135, 0, 215),
    (95, 0, 175),
    (0, 0, 135),
    (0, 95, 135),
    (0, 135, 135),
    (0, 175, 135),
    (0, 215, 135),
    (0, 255, 135),
    (215, 0, 255),
    (175, 0, 215),
    (135, 0, 215),
    (95, 0, 135),
    (0, 0, 95),
    (0, 95, 95),
    (0, 135, 95),
    (0, 175, 95),
    (0, 215, 95),
    (0, 255, 95),
    (255, 0, 255),
    (215, 0, 215),
    (175, 0, 175),
    (135, 0, 135),
    (95, 0, 95),
    (0, 0, 0),
    (0, 95, 0),
    (0, 135, 0),
    (0, 175, 0),
    (0, 215, 0),
    (0, 255, 0),
    (0, 255, 95),
    (0, 255, 135),
    (0, 255, 175),
    (0, 255, 215),
    (0, 255, 255),
    (255, 0, 215),
    (215, 0, 175),
    (175, 0, 135),
    (135, 0, 95),
    (95, 0, 0),
    (95, 95, 0),
    (95, 135, 0),
    (95, 175, 0),
    (95, 215, 0),
    (95, 255, 0),
    (95, 255, 95),
    (95, 255, 135),
    (95, 255, 175),
    (95, 255, 215),
    (95, 255, 255),
    (0, 215, 255),
    (255, 0, 175),
    (215, 0, 135),
    (175, 0, 95),
    (135, 0, 0),
    (135, 95, 0),
    (135, 135, 0),
    (135, 175, 0),
    (135, 215, 0),
    (135, 255, 0),
    (135, 255, 95),
    (135, 255, 135),
    (135, 255, 175),
    (135, 255, 215),
    (135, 255, 255),
    (95, 215, 255),
    (0, 175, 255),
    (255, 0, 135),
    (215, 0, 95),
    (175, 0, 0),
    (175, 95, 0),
    (175, 135, 0),
    (175, 175, 0),
    (175, 215, 0),
    (175, 255, 0),
    (175, 255, 95),
    (175, 255, 135),
    (175, 255, 175),
    (175, 255, 215),
    (175, 255, 255),
    (135, 215, 255),
    (95, 175, 255),
    (0, 135, 255),
    (255, 0, 95),
    (215, 0, 0),
    (215, 95, 0),
    (215, 135, 0),
    (215, 175, 0),
    (215, 215, 0),
    (215, 255, 0),
    (215, 255, 95),
    (215, 255, 135),
    (215, 255, 175),
    (215, 255, 215),
    (215, 255, 255),
    (175, 215, 255),
    (135, 175, 255),
    (95, 135, 255),
    (0, 95, 255),
    (255, 0, 0),
    (255, 95, 0),
    (255, 135, 0),
    (255, 175, 0),
    (255, 215, 0),
    (255, 255, 0),
    (255, 255, 95),
    (255, 255, 135),
    (255, 255, 175),
    (255, 255, 215),
    (255, 255, 255),
    (215, 215, 255),
    (175, 175, 255),
    (135, 135, 255),
    (95, 95, 255),
    (0, 0, 255),
    (255, 215, 0),
    (255, 215, 95),
    (255, 215, 135),
    (255, 215, 175),
    (255, 215, 215),
    (255, 215, 255),
    (215, 175, 255),
    (175, 135, 255),
    (135, 95, 255),
    (95, 0, 255),
    (95, 95, 215),
    (95, 135, 215),
    (95, 175, 215),
    (95, 215, 215),
    (255, 175, 0),
    (255, 175, 95),
    (255, 175, 135),
    (255, 175, 175),
    (255, 175, 215),
    (255, 175, 255),
    (215, 135, 255),
    (175, 95, 255),
    (135, 0, 255),
    (135, 95, 215),
    (95, 95, 175),
    (95, 135, 175),
    (95, 175, 175),
    (95, 215, 175),
    (255, 135, 0),
    (255, 135, 95),
    (255, 135, 135),
    (255, 135, 175),
    (255, 135, 215),
    (255, 135, 255),
    (215, 95, 255),
    (175, 0, 255),
    (175, 95, 215),
    (135, 95, 175),
    (95, 95, 135),
    (95, 135, 135),
    (95, 175, 135),
    (95, 215, 135),
    (255, 95, 0),
    (255, 95, 95),
    (255, 95, 135),
    (255, 95, 175),
    (255, 95, 215),
    (255, 95, 255),
    (215, 0, 255),
    (215, 95, 215),
    (175, 95, 175),
    (135, 95, 135),
    (95, 95, 95),
    (95, 135, 95),
    (95, 175, 95),
    (95, 215, 95),
    (95, 215, 135),
    (95, 215, 175),
    (95, 215, 215),
    (255, 0, 0),
    (255, 0, 95),
    (255, 0, 135),
    (255, 0, 175),
    (255, 0, 215),
    (255, 0, 255),
    (215, 95, 175),
    (175, 95, 135),
    (135, 95, 95),
    (135, 135, 95),
    (135, 175, 95),
    (135, 215, 95),
    (135, 215, 135),
    (135, 215, 175),
    (135, 215, 215),
    (95, 175, 215),
    (215, 95, 135),
    (175, 95, 95),
    (175, 135, 95),
    (175, 175, 95),
    (175, 215, 95),
    (175, 215, 135),
    (175, 215, 175),
    (175, 215, 215),
    (135, 175, 215),
    (95, 135, 215),
    (215, 95, 95),
    (215, 135, 95),
    (215, 175, 95),
    (215, 215, 95),
    (215, 215, 135),
    (215, 215, 175),
    (215, 215, 215),
    (175, 175, 215),
    (135, 135, 215),
    (95, 95, 215),
    (198, 198, 198),
    (208, 208, 208),
    (218, 218, 218),
    (228, 228, 228),
    (238, 238, 238),
    (255, 255, 255),
    (215, 175, 95),
    (215, 175, 135),
    (215, 175, 175),
    (215, 175, 215),
    (175, 135, 215),
    (135, 95, 215),
    (132, 132, 132),
    (148, 148, 148),
    (158, 158, 158),
    (168, 168, 168),
    (178, 178, 178),
    (188, 188, 188),
    (135, 135, 175),
    (135, 175, 175),
    (215, 135, 95),
    (215, 135, 135),
    (215, 135, 175),
    (215, 135, 215),
    (175, 95, 215),
    (68, 68, 68),
    (78, 78, 78),
    (88, 88, 88),
    (98, 98, 98),
    (108, 108, 108),
    (118, 118, 118),
    (128, 128, 128),
    (175, 135, 175),
    (135, 135, 135),
    (135, 175, 135),
    (135, 175, 175),
    (215, 95, 95),
    (215, 95, 135),
    (215, 95, 175),
    (215, 95, 215),
    (0, 0, 0),
    (8, 8, 8),
    (18, 18, 18),
    (28, 28, 28),
    (38, 38, 38),
    (48, 48, 48),
    (58, 58, 58),
    (175, 135, 135),
    (175, 175, 135),
    (175, 175, 175),
    (135, 135, 175),
    (175, 135, 135),
    (175, 135, 175)
]

def closest_c256(color: tuple[int, int, int]) -> tuple[int, int, int]:
    color_distance = lambda c1, c2: sum((c1[i] - c2[i]) ** 2 for i in range(3))
    return min(c256, key=lambda c: color_distance(color, c))


class Color(tuple[int, int, int], Enum):
    RED = (255, 0, 0)
    GREEN = (0, 255, 0)
    BLUE = (0, 0, 255)
    YELLOW = (255, 255, 0)
    CYAN = (0, 255, 255)
    MAGENTA = (255, 0, 255)
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    GRAY = (128, 128, 128)
    DARK_GRAY = (64, 64, 64)
    LIGHT_GRAY = (192, 192, 192)
    DARK_RED = (128, 0, 0)
    DARK_GREEN = (0, 128, 0)
    DARK_BLUE = (0, 0, 128)
    DARK_YELLOW = (128, 128, 0)
    DARK_CYAN = (0, 128, 128)
    ORANGE = (255, 128, 0)
    BROWN = (128, 64, 0)
    PINK = (255, 0, 128)
    PURPLE = (128, 0, 255)
    TURQUOISE = (0, 128, 255)
    VIOLET = (128, 0, 255)
    SALMON = (255, 128, 128)
    SEA_GREEN = (0, 255, 128)
    SLATE_BLUE = (0, 128, 255)
    SLATE_GRAY = (0, 128, 128)
    TAN = (255, 128, 64)
    TOMATO = (255, 128, 64)
    WHEAT = (255, 255, 128)
    YELLOW_GREEN = (128, 255, 0)
    KHAKI = (192, 192, 64)
    ORCHID = (128, 0, 128)

    @classmethod
    def random(cls) -> Color:
        return random.choice(list(cls))

    @classmethod
    def fromhex(cls, hex_code: str) -> tuple[int, int, int]:
        return closest_c256(tuple(int(hex_code[i:i+2], 16) for i in (0, 2, 4)))

class ColorMix(Enum):
    ORANGE = (Color.fromhex("FD8B4E"), Color.fromhex("612400"), Color.fromhex("FFE0CE"), Color.fromhex("FFB48F"))
    GREY = (Color.fromhex("222222"), Color.fromhex("161213"), Color.fromhex("5C5C5C"), Color.fromhex("3B3232"))
    TERRA = (Color.fromhex("8A7574"), Color.fromhex("252120"), Color.fromhex("E8CCCB"), Color.fromhex("8A7574"))
    DUST = (Color.fromhex("989292"), Color.fromhex("2C2829"), Color.fromhex("FFFFFF"), Color.fromhex("989292"))
    BROWN = (Color.fromhex("522506"), Color.fromhex("000000"), Color.fromhex("905022"), Color.fromhex("1C0C00"))
    SKY = (Color.fromhex("4EDEFD"), Color.fromhex("000461"), Color.fromhex("CEFFF3"), Color.fromhex("EFFF8F"))
    PINK = (Color.fromhex("FD4E8D"), Color.fromhex("612400"), Color.fromhex("FFCECE"), Color.fromhex("FF8F8F"))
    CASALE = (Color.fromhex("FEFEFB"), Color.fromhex("161213"), Color.fromhex("5C5C5C"), Color.fromhex("DF8F53"))

    @classmethod
    def random(cls) -> Color:
        return random.choice(list(cls))



def mix_color(base: Color, mix: Color = Color.WHITE, weight: float = 0) -> Color:
    red = int(base[0] * (1 - weight) + mix[0] * weight)
    green = int(base[1] * (1 - weight) + mix[1] * weight)
    blue = int(base[2] * (1 - weight) + mix[2] * weight)

    return (red, green, blue)